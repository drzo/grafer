{"version":3,"file":"env.js","sources":["../../../../node_modules/@dekkai/env/build/lib/node.js","../../../../node_modules/@dekkai/env/build/lib/moduleLoader.js","../../../../node_modules/@dekkai/env/build/lib/deno.js"],"sourcesContent":["/**\r\n * Caches the result of a  NodeJS environment check.\r\n * @internal\r\n */\r\nconst kIsNodeJS = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\r\n/**\r\n * Checks if the current environment is NodeJS.\r\n */\r\nfunction isNodeJS() {\r\n    return kIsNodeJS;\r\n}\n\nexport { isNodeJS };\n//# sourceMappingURL=node.js.map\n","import { isNodeJS } from './node.js';\n\n/**\r\n * Checks if the current environment supports dynamic imports.\r\n * @internal\r\n */\r\nfunction checkDynamicImport() {\r\n    try {\r\n        import(`${null}`).catch(() => false);\r\n        return true;\r\n    }\r\n    catch {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * Caches the result of a dynamic imports check.\r\n * @internal\r\n */\r\nconst kSupportsDynamicImport = checkDynamicImport();\r\n/**\r\n * Returns a boolean that defines if the current environment supports dynamic imports.\r\n */\r\nfunction supportsDynamicImport() {\r\n    return kSupportsDynamicImport;\r\n}\r\n/**\r\n * Detects the environment and loads a module using either `require` or `import`.\r\n * @param mod - The name or path to the module to load.\r\n */\r\nasync function loadModule(mod) {\r\n    if (kSupportsDynamicImport) {\r\n        return await import(mod.toString());\r\n    }\r\n    else if (isNodeJS()) {\r\n        return typeof module !== 'undefined' && typeof module.require === 'function' && module.require(mod.toString()) ||\r\n            // eslint-disable-next-line camelcase\r\n            typeof __non_webpack_require__ === 'function' && __non_webpack_require__(mod.toString()) ||\r\n            typeof require === 'function' && require(mod.toString()); // eslint-disable-line\r\n    }\r\n    // not supported, a dynamic loader could be created for browser environments here, all modern browsers support\r\n    // dynamic imports though so not implemented for now.\r\n    throw 'ERROR: Can\\'t load modules dynamically on this platform';\r\n}\n\nexport { loadModule, supportsDynamicImport };\n//# sourceMappingURL=moduleLoader.js.map\n","/**\r\n * Caches the result of a  NodeJS environment check.\r\n * @internal\r\n */\r\nconst kIsDeno = Boolean(typeof Deno !== 'undefined');\r\n/**\r\n * Checks if the current environment is Deno.\r\n */\r\nfunction isDeno() {\r\n    return kIsDeno;\r\n}\n\nexport { isDeno };\n//# sourceMappingURL=deno.js.map\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,OAAO,KAAK,WAAW,GAAG,OAAO,GAAG,CAAC,CAAC,KAAK,kBAAkB,CAAC;AACtH;AACA;AACA;AACA,SAAS,QAAQ,GAAG;AACpB,IAAI,OAAO,SAAS,CAAC;AACrB;;ACRA;AACA;AACA;AACA;AACA,SAAS,kBAAkB,GAAG;AAC9B,IAAI,IAAI;AACR,QAAQ,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,CAAC;AAC7C,QAAQ,OAAO,IAAI,CAAC;AACpB,KAAK;AACL,IAAI,MAAM;AACV,QAAQ,OAAO,KAAK,CAAC;AACrB,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA,MAAM,sBAAsB,GAAG,kBAAkB,EAAE,CAAC;AAOpD;AACA;AACA;AACA;AACA,eAAe,UAAU,CAAC,GAAG,EAAE;AAC/B,IAAI,IAAI,sBAAsB,EAAE;AAChC,QAAQ,OAAO,MAAM,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC5C,KAAK;AACL,SAAS,IAAI,QAAQ,EAAE,EAAE;AACzB,QAAQ,OAAO,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,MAAM,CAAC,OAAO,KAAK,UAAU,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;AACtH;AACA,YAAY,OAAO,uBAAuB,KAAK,UAAU,IAAI,uBAAuB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;AACpG,YAAY,OAAO,OAAO,KAAK,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;AACrE,KAAK;AACL;AACA;AACA,IAAI,MAAM,yDAAyD,CAAC;AACpE;;AC3CA;AACA;AACA;AACA;AACA,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC;AACrD;AACA;AACA;AACA,SAAS,MAAM,GAAG;AAClB,IAAI,OAAO,OAAO,CAAC;AACnB;;;;"}
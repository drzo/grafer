{"version":3,"file":"data-source.js","sources":["../../../../node_modules/@dekkai/data-source/build/lib/chunk/DataChunk.js","../../../../node_modules/@dekkai/data-source/build/lib/file/local/LocalDataFile.js","../../../../node_modules/@dekkai/data-source/build/lib/file/local/LocalDataFileNode.js","../../../../node_modules/@dekkai/data-source/build/lib/file/local/LocalDataFileBrowser.js","../../../../node_modules/@dekkai/data-source/build/lib/file/local/LocalDataFileDeno.js","../../../../node_modules/@dekkai/data-source/build/lib/file/DataFile.js"],"sourcesContent":["/**\r\n * [[DataSource]] that represents a section (chunk) of a larger data source (parent). Useful when chunking a data source to\r\n * parallelize processing.\r\n */\r\nclass DataChunk {\r\n    /**\r\n     * @param source - The parent data source for this chunk\r\n     * @param start - The start of this chunk, in bytes, within the parent data source\r\n     * @param end - The end of this chunk, in bytes, within the parent data source\r\n     */\r\n    constructor(source, start, end) {\r\n        /**\r\n         * Variable to store the loaded data for this chunk.\r\n         */\r\n        this._buffer = null;\r\n        this.source = source;\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n    /**\r\n     * When this chunk is loaded, returns the buffer containing the data for this chunk, `null` otherwise.\r\n     */\r\n    get buffer() {\r\n        return this._buffer;\r\n    }\r\n    /**\r\n     * The total byte length this chunk represents.\r\n     *\r\n     * NOTE: This value can change after a chunk is loaded for the first time if the chunk belongs to a remote data\r\n     * source for which the total size is unknown.\r\n     */\r\n    get byteLength() {\r\n        return this.end - this.start;\r\n    }\r\n    /**\r\n     * Is this chunk loaded in memory.\r\n     */\r\n    get loaded() {\r\n        return Boolean(this._buffer);\r\n    }\r\n    /**\r\n     * Loads this chunk into memory.\r\n     *\r\n     * NOTE: If this chunk belongs to a remote [[DataSource]], this function waits until the data for this chunk has been\r\n     * transferred from the remote and into memory. Also, if the final size for the remote [[DataSource]] is unknown,\r\n     * the [[byteLength]] of this chunk could change after it finishes loading.\r\n     */\r\n    async load() {\r\n        if (!this._buffer) {\r\n            this._buffer = await this.loadData();\r\n            // if we don't know the total size of remote files, the actual size of the chunk could change\r\n            if (this._buffer === null) { // the chunk could not be loaded\r\n                this.start = 0;\r\n                this.end = 0;\r\n            }\r\n            else if (this.byteLength > this._buffer.byteLength) { // the actual data is smaller than the requested size\r\n                this.end -= this.byteLength - this._buffer.byteLength;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Unloads this chunk from memory.\r\n     */\r\n    unload() {\r\n        this._buffer = null;\r\n    }\r\n    /**\r\n     * Slices this chunk and returns a new data chunk pointing at the data within the specified boundaries.\r\n     * @param start - Pointer to the start of the data in bytes\r\n     * @param end - Pointer to the end of the data in bytes\r\n     */\r\n    slice(start, end) {\r\n        return new DataChunk(this, start, end);\r\n    }\r\n    /**\r\n     * Loads the data source into an ArrayBuffer. Optionally a `start` and `end` can be specified to load a part of the\r\n     * data.\r\n     * @param start - The offset at which the data will start loading\r\n     * @param end - The offset at which the data will stop loading\r\n     */\r\n    loadData(start = 0, end = this.byteLength) {\r\n        return this.source.loadData(this.start + start, this.start + end);\r\n    }\r\n}\n\nexport { DataChunk };\n//# sourceMappingURL=DataChunk.js.map\n","import { DataChunk } from '../../chunk/DataChunk.js';\n\nclass LocalDataFile {\r\n    /**\r\n     * Slices the file and returns a data chunk pointing at the data within the specified boundaries.\r\n     * @param start - Pointer to the start of the data in bytes\r\n     * @param end - Pointer to the end of the data in bytes\r\n     */\r\n    slice(start, end) {\r\n        return new DataChunk(this, start, end);\r\n    }\r\n}\n\nexport { LocalDataFile };\n//# sourceMappingURL=LocalDataFile.js.map\n","import '../../chunk/DataChunk.js';\nimport { LocalDataFile } from './LocalDataFile.js';\nimport { loadModule } from '@dekkai/env/build/lib/moduleLoader';\nimport { isNodeJS } from '@dekkai/env/build/lib/node';\n\n/**\r\n * Cached [`fs`](https://nodejs.org/api/fs.html) module in node and `null` in every other platform. If this in null in\r\n * node, `await` for [[kFsPromise]] to finish.\r\n * @internal\r\n */\r\nlet gFS = null;\r\n/**\r\n * Promise that resolves to the [`fs`](https://nodejs.org/api/fs.html) module in node and `null` in every other platform.\r\n * @internal\r\n */\r\nconst kFsPromise = (isNodeJS() ? loadModule('fs') : Promise.resolve(null)).then(fs => (gFS = fs));\r\n/**\r\n * Represents a data file on the node platform.\r\n */\r\nclass LocalDataFileNode extends LocalDataFile {\r\n    /**\r\n     * @param handle - A node file handle\r\n     * @param stats - Stats for the file the handle points at\r\n     */\r\n    constructor(handle, stats) {\r\n        super();\r\n        this.handle = handle;\r\n        this.stats = stats;\r\n    }\r\n    /**\r\n     * Utility function to wrap a file as a [[DataFile]] for this platform.\r\n     * @param source - The file to wrap\r\n     */\r\n    static async fromSource(source) {\r\n        // wait for `fs` to be loaded\r\n        await kFsPromise;\r\n        let handle;\r\n        if (source instanceof URL || typeof source === 'string') {\r\n            handle = gFS.openSync(source);\r\n        }\r\n        else if (typeof source === 'number') {\r\n            handle = source;\r\n        }\r\n        else {\r\n            throw `A LocalDataFileNode cannot be created from a ${typeof source} instance`;\r\n        }\r\n        const stats = gFS.fstatSync(handle);\r\n        return new LocalDataFileNode(handle, stats);\r\n    }\r\n    /**\r\n     * The total length, in bytes, of the file this instance represents.\r\n     */\r\n    get byteLength() {\r\n        return this.stats.size;\r\n    }\r\n    /**\r\n     * Closes the local file handle for the current platform. After this function is called all subsequent operations\r\n     * on this file, or any other data sources depending on this file, will fail.\r\n     */\r\n    close() {\r\n        const handle = this.handle;\r\n        kFsPromise.then(() => gFS.closeSync(handle));\r\n        this.handle = null;\r\n        this.stats = null;\r\n    }\r\n    /**\r\n     * Loads the file into an ArrayBuffer. Optionally a `start` and `end` can be specified to load a part of the file.\r\n     * @param start - The offset at which the data will start loading\r\n     * @param end - The offset at which the data will stop loading\r\n     */\r\n    async loadData(start = 0, end = this.byteLength) {\r\n        // wait for `fs` to be loaded\r\n        await kFsPromise;\r\n        const length = end - start;\r\n        const result = new Uint8Array(length);\r\n        let loaded = 0;\r\n        while (loaded < length) {\r\n            loaded += await this.loadDataIntoBuffer(result, loaded, start + loaded, end);\r\n        }\r\n        return result.buffer;\r\n    }\r\n    /**\r\n     * Loads data into a buffer with the specified parameters.\r\n     * @param buffer - The buffer in which the data will be loaded. It must be large enough to fit the data requested\r\n     * @param offset - The byte offset within the buffer at which the data will be written\r\n     * @param start - The byte offset within the file where data will be read\r\n     * @param end - The byte offset within the file at which the data will stop being read\r\n     */\r\n    loadDataIntoBuffer(buffer, offset, start, end) {\r\n        return new Promise((resolve, reject) => {\r\n            const length = end - start;\r\n            gFS.read(this.handle, buffer, offset, length, start, (err, bytesRead) => {\r\n                if (err) {\r\n                    reject(err);\r\n                }\r\n                else {\r\n                    resolve(bytesRead);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\n\nexport { LocalDataFileNode };\n//# sourceMappingURL=LocalDataFileNode.js.map\n","import '../../chunk/DataChunk.js';\nimport { LocalDataFile } from './LocalDataFile.js';\n\n/**\r\n * Represents a data file on the browser platform.\r\n */\r\nclass LocalDataFileBrowser extends LocalDataFile {\r\n    /**\r\n     * @param blob - Container of the file\r\n     */\r\n    constructor(blob) {\r\n        super();\r\n        this.blob = blob;\r\n    }\r\n    /**\r\n     * Utility function to wrap a file as a [[DataFile]] for this platform.\r\n     * @param source - The file to wrap\r\n     */\r\n    static async fromSource(source) {\r\n        return new LocalDataFileBrowser(source);\r\n    }\r\n    /**\r\n     * The total length, in bytes, of the file this instance represents.\r\n     */\r\n    get byteLength() {\r\n        return this.blob.size;\r\n    }\r\n    /**\r\n     * Closes the local file handle for the current platform. After this function is called all subsequent operations\r\n     * on this file, or any other data sources depending on this file, will fail.\r\n     */\r\n    close() {\r\n        this.blob = null;\r\n    }\r\n    /**\r\n     * Loads the file into an ArrayBuffer. Optionally a `start` and `end` can be specified to load a part of the file.\r\n     * @param start - The offset at which the data will start loading\r\n     * @param end - The offset at which the data will stop loading\r\n     */\r\n    async loadData(start = 0, end = this.byteLength) {\r\n        const slice = this.blob.slice(start, end);\r\n        return await this.loadBlob(slice);\r\n    }\r\n    /**\r\n     * Loads the specified blob into an array buffer.\r\n     * @param blob - The blob to load\r\n     */\r\n    loadBlob(blob) {\r\n        return new Promise(resolve => {\r\n            const reader = new FileReader();\r\n            reader.onload = () => {\r\n                resolve(reader.result);\r\n            };\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n    }\r\n}\n\nexport { LocalDataFileBrowser };\n//# sourceMappingURL=LocalDataFileBrowser.js.map\n","import '../../chunk/DataChunk.js';\nimport { LocalDataFile } from './LocalDataFile.js';\n\n/**\r\n * Represents a data file on the deno platform.\r\n */\r\nclass LocalDataFileDeno extends LocalDataFile {\r\n    /**\r\n     * @param file - A deno file instance\r\n     * @param info - Info for the file instance\r\n     */\r\n    constructor(file, info) {\r\n        super();\r\n        this.file = file;\r\n        this.info = info;\r\n    }\r\n    /**\r\n     * Utility function to wrap a file as a [[DataFile]] for this platform.\r\n     * @param source - The file to wrap\r\n     */\r\n    static async fromSource(source) {\r\n        if (!(source instanceof URL) && typeof source !== 'string') {\r\n            throw `A LocalDataFileDeno cannot be created from a ${typeof source} instance`;\r\n        }\r\n        const stats = await Deno.stat(source);\r\n        if (!stats.isFile) {\r\n            throw `The path \"${source} does not point to a file\"`;\r\n        }\r\n        const file = await Deno.open(source, { read: true, write: false });\r\n        return new LocalDataFileDeno(file, stats);\r\n    }\r\n    /**\r\n     * The total length, in bytes, of the file this instance represents.\r\n     */\r\n    get byteLength() {\r\n        return this.info.size;\r\n    }\r\n    /**\r\n     * Closes the local file handle for the current platform. After this function is called all subsequent operations\r\n     * on this file, or any other data sources depending on this file, will fail.\r\n     */\r\n    close() {\r\n        Deno.close(this.file.rid);\r\n        this.file = null;\r\n        this.info = null;\r\n    }\r\n    /**\r\n     * Loads the file into an ArrayBuffer. Optionally a `start` and `end` can be specified to load a part of the file.\r\n     * @param start - The offset at which the data will start loading\r\n     * @param end - The offset at which the data will stop loading\r\n     */\r\n    async loadData(start = 0, end = this.byteLength) {\r\n        const length = end - start;\r\n        const result = new Uint8Array(length);\r\n        let loaded = 0;\r\n        while (loaded < length) {\r\n            loaded += await this.loadDataIntoBuffer(result, loaded, start + loaded, end);\r\n        }\r\n        return result.buffer;\r\n    }\r\n    /**\r\n     * Loads data into a buffer with the specified parameters.\r\n     * @param buffer - The buffer in which the data will be loaded. It must be large enough to fit the data requested\r\n     * @param offset - The byte offset within the buffer at which the data will be written\r\n     * @param start - The byte offset within the file where data will be read\r\n     * @param end - The byte offset within the file at which the data will stop being read\r\n     */\r\n    async loadDataIntoBuffer(buffer, offset, start, end) {\r\n        const cursorPosition = await this.file.seek(start, Deno.SeekMode.Start);\r\n        if (cursorPosition !== start) {\r\n            throw 'ERROR: Cannot seek to the desired position';\r\n        }\r\n        const result = new Uint8Array(end - start);\r\n        const bytesRead = await this.file.read(result);\r\n        buffer.set(result, offset);\r\n        return bytesRead;\r\n    }\r\n}\n\nexport { LocalDataFileDeno };\n//# sourceMappingURL=LocalDataFileDeno.js.map\n","import '../chunk/DataChunk.js';\nimport './local/LocalDataFile.js';\nimport '@dekkai/env/build/lib/moduleLoader';\nimport { isNodeJS } from '@dekkai/env/build/lib/node';\nimport { LocalDataFileNode } from './local/LocalDataFileNode.js';\nimport { LocalDataFileBrowser } from './local/LocalDataFileBrowser.js';\nimport { LocalDataFileDeno } from './local/LocalDataFileDeno.js';\nimport { isDeno } from '@dekkai/env/build/lib/deno';\n\n/**\r\n * Base class for data files on all platforms.\r\n */\r\nclass DataFile {\r\n    /**\r\n     * Utility function to wrap a local file as a [[DataFile]] for this platform.\r\n     * @param source - The file to wrap\r\n     */\r\n    static async fromLocalSource(source) {\r\n        if (isNodeJS()) {\r\n            return LocalDataFileNode.fromSource(source);\r\n        }\r\n        else if (isDeno()) {\r\n            return LocalDataFileDeno.fromSource(source);\r\n        }\r\n        return LocalDataFileBrowser.fromSource(source);\r\n    }\r\n    /**\r\n     * Utility function to wrap a remote file as a [[DataFile]] for this platform.\r\n     * @param source - The file to wrap\r\n     */\r\n    static async fromRemoteSource(source) {\r\n        throw 'Not implemented yet!';\r\n    }\r\n}\n\nexport { DataFile };\n//# sourceMappingURL=DataFile.js.map\n"],"names":[],"mappings":"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"}
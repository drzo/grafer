{"version":3,"file":"event-emitter.js","sources":["../../../../node_modules/@dekkai/event-emitter/build/lib/EventEmitter.js"],"sourcesContent":["/**\r\n * A symbol that used to register omni-listeners.\r\n * @internal\r\n */\r\nconst kOmniEvent = Symbol('EventEmitter::omni::event');\r\n/**\r\n * @internal\r\n */\r\nclass EventEmitterMixin {\r\n    /**\r\n     * Mixin method that holds the EventEmitter implementation, this function is exposed through `EventEmitter.mixin`.\r\n     * @param Parent - The parent class into which the EventEmitter implementation will be mixed in.\r\n     */\r\n    static mixin(Parent) {\r\n        const ParentConstructor = Parent; // eslint-disable-line @typescript-eslint/ban-types\r\n        class EventEmitter extends ParentConstructor {\r\n            constructor() {\r\n                super(...arguments);\r\n                /**\r\n                 * Map of registered event listeners with this instance.\r\n                 * @private\r\n                 */\r\n                this.listeners = new Map();\r\n            }\r\n            /**\r\n             * Returns a symbol that can be used to register an omni-listener.\r\n             */\r\n            static get omniEvent() {\r\n                return kOmniEvent;\r\n            }\r\n            /**\r\n             * Register an event listener callback for the specified event.\r\n             *\r\n             * NOTE: Pass `*` as the event type to listen to all event emitted by this instance.\r\n             * @param type - The event to listen for\r\n             * @param callback - Called when the event is emitted by this instance\r\n             */\r\n            on(type, callback) {\r\n                const queue = this.listeners.get(type);\r\n                if (queue) {\r\n                    queue.add(callback);\r\n                }\r\n                else {\r\n                    this.listeners.set(type, new Set([callback]));\r\n                }\r\n            }\r\n            /**\r\n             * Unregister an event listener callback.\r\n             * @param type - The event to unregister from\r\n             * @param callback - Callback function to remove\r\n             */\r\n            off(type, callback) {\r\n                const queue = this.listeners.get(type);\r\n                if (queue) {\r\n                    queue.delete(callback);\r\n                }\r\n            }\r\n            /**\r\n             * Emit an event to all event listeners register for that specific event and omni-listeners (listeners registered\r\n             * wising `*` as the event type).\r\n             * @param type - The event to emit, cannot be `*`\r\n             * @param args - Parameters to pass to the callback functions registered for this event\r\n             */\r\n            emit(type, ...args) {\r\n                if (type === kOmniEvent) {\r\n                    return;\r\n                }\r\n                if (this.listeners.has(type)) {\r\n                    const stack = new Set(this.listeners.get(type));\r\n                    for (const callback of stack) {\r\n                        callback.call(this, type, ...args);\r\n                    }\r\n                }\r\n                if (this.listeners.has(kOmniEvent)) {\r\n                    const omni = new Set(this.listeners.get(kOmniEvent));\r\n                    for (const callback of omni) {\r\n                        callback.call(this, type, ...args);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return EventEmitter;\r\n    }\r\n}\r\n/**\r\n * Simple event emitter class.\r\n *\r\n * Supports \"omni-listeners\" through its `omniEvent` static property. An omni-listener is added/removed as any other\r\n * listener but it will be triggered with ANY event rather than with a specific one.\r\n *\r\n * Events can be strings or symbols. Internally, uses Map and Set instances to deal with events and listeners so in\r\n * theory anything that can be used as a Map key can be used as an event, only strings and symbols are guaranteed to\r\n * work however.\r\n */\r\nclass EventEmitter extends EventEmitterMixin.mixin(EventEmitterMixin) {\r\n}\n\nexport { EventEmitter };\n//# sourceMappingURL=EventEmitter.js.map\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAM,UAAU,GAAG,MAAM,CAAC,2BAA2B,CAAC,CAAC;AACvD;AACA;AACA;AACA,MAAM,iBAAiB,CAAC;AACxB;AACA;AACA;AACA;AACA,IAAI,OAAO,KAAK,CAAC,MAAM,EAAE;AACzB,QAAQ,MAAM,iBAAiB,GAAG,MAAM,CAAC;AACzC,QAAQ,MAAM,YAAY,SAAS,iBAAiB,CAAC;AACrD,YAAY,WAAW,GAAG;AAC1B,gBAAgB,KAAK,CAAC,GAAG,SAAS,CAAC,CAAC;AACpC;AACA;AACA;AACA;AACA,gBAAgB,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAC;AAC3C,aAAa;AACb;AACA;AACA;AACA,YAAY,WAAW,SAAS,GAAG;AACnC,gBAAgB,OAAO,UAAU,CAAC;AAClC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE;AAC/B,gBAAgB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvD,gBAAgB,IAAI,KAAK,EAAE;AAC3B,oBAAoB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACxC,iBAAiB;AACjB,qBAAqB;AACrB,oBAAoB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAClE,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,YAAY,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE;AAChC,gBAAgB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACvD,gBAAgB,IAAI,KAAK,EAAE;AAC3B,oBAAoB,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC3C,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,EAAE;AAChC,gBAAgB,IAAI,IAAI,KAAK,UAAU,EAAE;AACzC,oBAAoB,OAAO;AAC3B,iBAAiB;AACjB,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AAC9C,oBAAoB,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AACpE,oBAAoB,KAAK,MAAM,QAAQ,IAAI,KAAK,EAAE;AAClD,wBAAwB,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AAC3D,qBAAqB;AACrB,iBAAiB;AACjB,gBAAgB,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE;AACpD,oBAAoB,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;AACzE,oBAAoB,KAAK,MAAM,QAAQ,IAAI,IAAI,EAAE;AACjD,wBAAwB,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;AAC3D,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT,QAAQ,OAAO,YAAY,CAAC;AAC5B,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,SAAS,iBAAiB,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AACtE;;;;"}
{"version":3,"file":"GraferView.js","sources":["../../../src/grafer/GraferView.ts"],"sourcesContent":["import {LitElement, customElement, html, query, PropertyValues, css, CSSResult} from 'lit-element';\nimport {GraferController, GraferLayerData, GraferPointsData} from './GraferController';\nimport {GraferInputColor} from '../renderer/ColorRegistry';\nimport {EventEmitter} from '@dekkai/event-emitter/build/lib/EventEmitter';\n\n@customElement('grafer-view') // is this a good enough name?\nexport class GraferView extends LitElement {\n    public static get styles(): CSSResult {\n        return css`\n            :host {\n                display: flex;\n                align-items: stretch;\n            }\n            #grafer_canvas {\n                flex-grow: 1;\n                max-width: 100%;\n                max-height: 100%;\n            }\n        `;\n    }\n\n    public static get properties(): any {\n        return {\n            points: {type: Object},\n            colors: {type: Object},\n            layers: {type: Object},\n        };\n    }\n\n    private points: GraferPointsData;\n    private colors: GraferInputColor[];\n    private layers: GraferLayerData[];\n\n    @query('#grafer_canvas', true)\n    private canvas: HTMLCanvasElement;\n\n    private _controller: GraferController = null;\n    public get controller(): GraferController {\n        return this._controller;\n    }\n\n    public connectedCallback(): void {\n        super.connectedCallback();\n    }\n\n    protected firstUpdated(_changedProperties: PropertyValues): void {\n        super.firstUpdated(_changedProperties);\n        this._controller = new GraferController(this.canvas, {\n            points: this.points,\n            colors: this.colors,\n            layers: this.layers,\n        });\n\n        this._controller.on(EventEmitter.omniEvent, (event: string | symbol, ...args: any[]) => {\n            const eventName = typeof event === 'symbol' ? event.description : event;\n            this.dispatchEvent(new CustomEvent(eventName, { detail: args }));\n        });\n    }\n\n    protected render(): unknown {\n        return html`<canvas id=\"grafer_canvas\"></canvas>`;\n    }\n}\n"],"names":[],"mappings":";;;;;;AAMA,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,UAAU;IAA1C;;QA8BY,gBAAW,GAAqB,IAAI,CAAC;KA0BhD;IAvDU,WAAW,MAAM;QACpB,OAAO,GAAG,CAAA;;;;;;;;;;SAUT,CAAC;KACL;IAEM,WAAW,UAAU;QACxB,OAAO;YACH,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;YACtB,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;YACtB,MAAM,EAAE,EAAC,IAAI,EAAE,MAAM,EAAC;SACzB,CAAC;KACL;IAUD,IAAW,UAAU;QACjB,OAAO,IAAI,CAAC,WAAW,CAAC;KAC3B;IAEM,iBAAiB;QACpB,KAAK,CAAC,iBAAiB,EAAE,CAAC;KAC7B;IAES,YAAY,CAAC,kBAAkC;QACrD,KAAK,CAAC,YAAY,CAAC,kBAAkB,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE;YACjD,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,MAAM,EAAE,IAAI,CAAC,MAAM;SACtB,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,CAAC,KAAsB,EAAE,GAAG,IAAW;YAC/E,MAAM,SAAS,GAAG,OAAO,KAAK,KAAK,QAAQ,GAAG,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC;YACxE,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;SACpE,CAAC,CAAC;KACN;IAES,MAAM;QACZ,OAAO,IAAI,CAAA,sCAAsC,CAAC;KACrD;CACJ,CAAA;AA5BG;IADC,KAAK,CAAC,gBAAgB,EAAE,IAAI,CAAC;0CACI;AA5BzB,UAAU;IADtB,aAAa,CAAC,aAAa,CAAC;GAChB,UAAU,CAwDtB"}
{"version":3,"file":"bundling.js","sources":["../../../../examples/src/edges/bundling.ts"],"sourcesContent":["import {html, render} from 'lit-html';\nimport '../../../src/grafer/GraferView';\n\nfunction createClusterNodePoints(cluster: string, x: number, y: number, r: number, count: number): any[] {\n    const PI2 = Math.PI * 2;\n    const degStep = (PI2) / count;\n    const radius = r - 7;\n    const result = [];\n\n    for (let angle = 0, i = 0; angle < PI2; angle += degStep, ++i) {\n        const pX = Math.cos(angle) * (Math.random() * radius + 5.0);\n        const pY = Math.sin(angle) * (Math.random() * radius + 5.0);\n        result.push({\n            id: `${cluster}-p${i}`,\n            x: x + pX,\n            y: y + pY,\n        });\n    }\n\n    return result;\n}\n\nfunction createInnerEdges(cluster: any[]): any[] {\n    const result = [];\n\n    for (let i = 0, n = cluster.length; i < n; ++i) {\n        const n1 = cluster[i];\n        for (let ii = i + 1, nn = cluster.length; ii < nn; ++ii) {\n            if (Math.random() > 0.75) {\n                const n2 = cluster[ii];\n                result.push({\n                    source: n1.id,\n                    target: n2.id,\n                    sourceColor: 2,\n                    targetColor: 2,\n                });\n            }\n        }\n    }\n\n    return result;\n}\n\nexport async function bundling(container: HTMLElement): Promise<void> {\n\n    // create an array od colors to be used\n    const colors = [\n        /* 0 */ '#d08770',\n        /* 1 */ '#88c0d0',\n        /* 2 */ '#ebcb8b',\n    ];\n\n    const pointsC1 = createClusterNodePoints('c1', -30.0, 0.0, 20, 12);\n    const nodesC1 = pointsC1.map(p => ({ point: p.id}));\n\n    const pointsC2 = createClusterNodePoints('c2', 40.0, 0.0, 25, 14);\n    const nodesC2 = pointsC2.map(p => ({ point: p.id}));\n\n    // create a 'points' data structure to hold all positional data\n    const points = {\n        data: [\n            { id: 'c1', x: -30.0, y: 0.0 },\n            { id: 'c1-c1', x: -10.0, y: 0.0 },\n            { id: 'c1-c2', x: -0.0, y: 0.0 },\n            ...pointsC1,\n\n            { id: 'c2', x: 40.0, y: 0.0 },\n            { id: 'c2-c1', x: 15.0, y: 0.0 },\n            { id: 'c2-c2', x: 5.0, y: 0.0 },\n            ...pointsC2,\n        ],\n    };\n\n    // nodes reference points\n    const nodes = {\n        data: [\n            ...nodesC1,\n            ...nodesC2,\n        ],\n    };\n\n    const clusters = {\n        type: 'Ring',\n        data: [\n            { point: 'c1', radius: 20.0, color: 1 },\n            { point: 'c2', radius: 25.0, color: 1 },\n        ],\n        mappings: {\n            radius: (entry): number => entry.radius,\n        },\n        options: {\n            billboard: false,\n        },\n    };\n\n    const clusterEdgesData = [];\n    for (let i = 0, n = pointsC1.length; i < n; ++i) {\n        const pointA = pointsC1[i];\n        for (let ii = 0, nn = pointsC2.length; ii < nn; ++ii) {\n            if (Math.random() > 0.5) {\n                const pointB = pointsC2[ii];\n                clusterEdgesData.push({\n                    source: pointA.id,\n                    target: pointB.id,\n                    control: ['c1-c1', 'c1-c2', 'c2-c2', 'c2-c1'],\n                    sourceColor: 1,\n                    targetColor: 1,\n                });\n            }\n        }\n    }\n\n    const clusterEdges = {\n        type: 'CurvedPath',\n        data: clusterEdgesData,\n        options: {\n            alpha: 0.04,\n            nearDepth: 0.9,\n        },\n    };\n\n    const nodesEdges = {\n        data:[\n            ...createInnerEdges(pointsC1),\n            ...createInnerEdges(pointsC2),\n        ],\n        options: {\n            alpha: 0.55,\n            nearDepth: 0.9,\n        },\n    };\n\n\n    const layers = [\n        { nodes: clusters, edges: clusterEdges },\n        { nodes, edges: nodesEdges },\n    ];\n\n    // pass the points to grafer\n    render(html`<grafer-view class=\"grafer_container\" .colors=\"${colors}\" .points=\"${points}\" .layers=\"${layers}\"></grafer-view><mouse-interactions></mouse-interactions>`, container);\n}\n"],"names":[],"mappings":"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"}